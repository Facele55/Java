import java.util.List;

/**
 * Validates a simulation
 */
public class Validate {
    private static class InvalidSimulationException extends Exception {
        public InvalidSimulationException() {
        }
    }

    // Helper method for validating the simulation
    private static void check(boolean check, String message) throws InvalidSimulationException {
        if (!check) {
            System.err.println("SIMULATION INVALID: " + message);
            throw new Validate.InvalidSimulationException();
        }
    }

    /**
     * Validates the given list of events is a valid simulation.
     * Returns true if the simulation is valid, false otherwise.
     *
     * @param events - a list of events generated by the simulation
     *               in the order they were generated.
     * @returns res - whether the simulation was valid or not
     */
    public static boolean validateSimulation(List<SimulationEvent> events) {
        try {
            check(events.get(0).event == SimulationEvent.EventType.SimulationStarting, "Simulation didn't start with initiation event");
            check(events.get(events.size() - 1).event == SimulationEvent.EventType.SimulationEnded, "Simulation didn't end with termination event");

            int apples = 0;
            int grapes = 0;
            int watermelons = 0;

            //checking if warehouse exceeded capacity
            for (SimulationEvent e : events) {
                if (e.event == SimulationEvent.EventType.HouseStartingFruits) {
                    String warehouseName = e.fruitHouse.warehouseName;
                    if (warehouseName.equals("Apples")) {
                        apples++;
                    } else if (warehouseName.equals("Grapes")) {
                        grapes++;
                    } else if (warehouseName.equals("Watermelons")) {
                        watermelons++;
                    }
                }
                if (e.event == SimulationEvent.EventType.HouseDoneFood) {
                    String warehouseName2 = e.fruitHouse.warehouseName;
                    if (warehouseName2.equals("Apples")) {
                        apples--;
                    } else if (warehouseName2.equals("Grapes")) {
                        grapes--;
                    } else if (warehouseName2.equals("Watermelons")) {
                        watermelons--;
                    }
                }
                if (apples > Simulation.warehouseCapacity) {
                    System.err.println("Apples crashed:" + apples);
                    throw new Validate.InvalidSimulationException();
                } else
                    System.out.println("Apples OK:" + apples);
                if (grapes > Simulation.warehouseCapacity) {
                    System.err.println("Grapes crashed:" + grapes);
                    throw new Validate.InvalidSimulationException();
                } else
                    System.out.println("Grapes OK:" + grapes);
                if (watermelons > Simulation.warehouseCapacity) {
                    System.err.println("Watermelons crashed:" + watermelons);
                    throw new Validate.InvalidSimulationException();
                } else
                    System.out.println("Watermelons OK:" + watermelons);
            }
            int custCount = Simulation.customersWithOrders.size();
            if (custCount != 0)
                System.out.println("Validation failed: All customers did not receive their orders!");
            else
                System.out.println("Validation success: All customers received their orders successfully!");

            return true;
        } catch (InvalidSimulationException e) {
            return false;
        }
    }
}